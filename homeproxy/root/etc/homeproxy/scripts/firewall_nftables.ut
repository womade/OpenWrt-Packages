#!/usr/bin/utpl -S
#!/usr/sbin/nft -f
{%
	/* UCI config start */
	import { cursor } from 'uci';

	const cfgname = 'homeproxy';
	const uci = cursor();
	uci.load(cfgname);

	/* Client config start */
	const table_mark = uci.get(cfgname, 'infra', 'table_mark') || '100';
	const routing_mode = uci.get(cfgname, 'config', 'routing_mode') || 'bypass_mainland_china';

	let outbound_node, outbound_udp_node;
	let self_mark, redirect_port, tproxy_port, tproxy_mark;
	let tun_name, tun_mark;

	if (routing_mode !== 'custom') {
		outbound_node = uci.get(cfgname, 'config', 'main_node') || 'nil';
		if (outbound_node !== 'nil') {
			self_mark = uci.get(cfgname, 'infra', 'self_mark') || '100';
			redirect_port = uci.get(cfgname, 'infra', 'redirect_port') || '5331';

			outbound_udp_node = uci.get(cfgname, 'config', 'main_udp_node') || 'nil';
			if (outbound_udp_node !== 'nil') {
				tproxy_port = uci.get(cfgname, 'infra', 'tproxy_port') || '5332';
				tproxy_mark = uci.get(cfgname, 'infra', 'tproxy_mark') || '101';
			}
		}
	} else {
		tun_name = uci.get(cfgname, 'infra', 'tun_name') || 'singtun0';
		tun_mark = uci.get(cfgname, 'infra', 'tun_mark') || '102';
		outbound_node = uci.get(cfgname, 'routing', 'default_outbound') || 'nil';
	}
	/* Client config end */
%}

{# Reserved addresses #}
set homeproxy_localaddr_v4 {
	type ipv4_addr
	flags interval
	auto-merge
	elements = {
		0.0.0.0/8,
		10.0.0.0/8,
		100.64.0.0/10,
		127.0.0.0/8,
		169.254.0.0/16,
		172.16.0.0/12,
		192.0.0.0/24,
		192.0.2.0/24,
		192.31.196.0/24,
		192.52.193.0/24,
		192.88.99.0/24,
		192.168.0.0/16,
		192.175.48.0/24,
		198.18.0.0/15,
		198.51.100.0/24,
		203.0.113.0/24,
		224.0.0.0/4,
		240.0.0.0/4
	}
}

set homeproxy_localaddr_v6 {
	type ipv6_addr
	flags interval
	auto-merge
	elements = {
		::/128,
		::1/128,
		::ffff:0:0/96,
		100::/64,
		64:ff9b::/96,
		2001::/32,
		2001:10::/28,
		2001:20::/28,
		2001:db8::/28,
		2002::/16,
		fc00::/7,
		fe80::/10,
		ff00::/8
	}
}

{# Regular mode #}
{%
if (routing_mode !== 'custom') {
	/* TCP redirect start */
	/* DST NAT rule */
	print('chain dstnat {', '\n');
	print('	meta nfproto { ipv4, ipv6 } meta l4proto tcp jump homeproxy_redirect', '\n');
	print('}', '\n');

	/* Output rule */
	print('\n', 'chain homeproxy_outredir {', '\n');
	print('	type nat hook output priority filter -105; policy accept', '\n');
	print('	meta nfproto { ipv4, ipv6 } meta l4proto tcp jump homeproxy_redirect', '\n');
	print('}', '\n');

	/* Redirect rule */
	print('\n', 'chain homeproxy_redirect {', '\n');

	/* Avoid loop */
	printf('	meta mark %s counter return\n', self_mark);

	/* Bypass reserved address */
	print('	ip daddr @homeproxy_localaddr_v4 counter return', '\n');
	print('	ip6 daddr @homeproxy_localaddr_v6 counter return', '\n');

	/* Redirect traffic */
	printf('	meta l4proto tcp counter redirect to :%s\n', redirect_port);

	print('}', '\n');
	/* TCP redirect end */

	if (outbound_udp_node !== 'nil') {
		/* UDP tproxy start */
		print('\n', 'chain homeproxy_mangle {', '\n');

		/* Avoid loop */
		printf('	meta mark %s counter return\n', self_mark);

		/* Bypass reserved address */
		print('	ip daddr @homeproxy_localaddr_v4 counter return', '\n');
		print('	ip6 daddr @homeproxy_localaddr_v6 counter return', '\n');

		printf('	meta l4proto udp mark set %s tproxy ip to 127.0.0.1:%s counter accept\n',
			tproxy_mark, tproxy_port);
		printf('	meta l4proto udp mark set %s tproxy ip6 to [::1]:%s counter accept\n',
			tproxy_mark, tproxy_port);

		print('}', '\n');

		print('\n', 'chain mangle_prerouting {', '\n');
		print('	meta l4proto udp counter jump homeproxy_mangle', '\n');
		print('}', '\n');
		/* UDP tproxy end */
	}
}
%}

{# TUN mode #}
{% if (routing_mode === 'custom'): %}
chain homeproxy_mangle {
	meta l4proto { tcp, udp } iifname {{ tun_name }} counter return
	ip daddr @homeproxy_localaddr_v4 counter return
	ip6 daddr @homeproxy_localaddr_v6 counter return
	meta l4proto { tcp, udp } counter mark set {{ tun_mark }}
}

chain mangle_prerouting {
	meta nfproto { ipv4, ipv6 } jump homeproxy_mangle
}

chain mangle_output {
	meta nfproto { ipv4, ipv6 } jump homeproxy_mangle
}
{% endif %}
